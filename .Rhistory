Pop <- function(x)
{
if (x %%5 == 0)
{
return("Pop")
} else if (x %%5 != 0)
{
return(x)
}
}
for (i in 1:100){
print(Pop(i))
}
for (i in 1:100){
if (Crackle(i)=="Crackle" && Pop(i)=="Pop")
{
print ("CracklePop")
}
else {
print(i)
}
}
Crackle <- function(x)
{
if (x%%3 == 0)
{
{return("Crackle")}
} else if (x%%3 != 0)
{
return (x)
}
}
for (i in 1:100)
{
print(Crackle(i))
}
Pop <- function(x)
{
if (x %%5 == 0)
{
return("Pop")
} else if (x %%5 != 0)
{
return(x)
}
}
for (i in 1:100){
print(Pop(i))
}
for (i in 1:100){
if (Crackle(i)=="Crackle" && Pop(i)=="Pop")
{
print ("CracklePop")
}
else {
print(i)
}
}
library(XML)
library(RCurl)
d = htmlParse(getURL("http://www.gamesforchange.org/festival/presenters/#E"))
d = htmlParse(getURL("http://www.gamesforchange.org/festival/presenters/"))
path = '//*[contains(concat( " ", @class, " " ), concat( " ", "synonyms", " " ))]//img'
xpathSApply(d, path, xmlAttrs)["src",]
[1] "/img/H.png" "/img/L.png" "/img/H.png" "/img/H.png" "/img/H.png"
[6] "/img/H.png" "/img/H.png"
install.packages("ggmap")
require(ggmap)
source('~/.active-rstudio-document')
osm <- get_openstreetmap()
ggmap(osm)
worldmap <- get_openstreetmap(bbox = c(left = -40.08, right = 50.27, top = 56.66,
bottom = -42.03), scale = 20, format = c("svg", "png", "pdf"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
worldmap <- get_openstreetmap(bbox = c(left = -40.08, right = 50.27, top = 56.66,
bottom = -42.03), scale = 20, format = c("svg", "png", "pdf"),
messaging = FALSE, urlonly = TRUE, filename = "ggmapTemp",
color = c("color"))
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ), scale = 20, format = c("svg", "png", "pdf"),
messaging = FALSE, urlonly = TRUE, filename = "ggmapTemp",
color = c("color"))
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 20, format = c("svg"),
messaging = FALSE, urlonly = TRUE, filename = "ggmapTemp",
color = c("color"))
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 20, format = c("png"),
messaging = FALSE, urlonly = TRUE, filename = "ggmapTemp",
color = c("color"))
ggmap(worldmap)
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 20, format = c("png"),
messaging = FALSE, urlonly = TRUE, filename = "ggmapTemp",
color = c("color"))
ggmap(worldmap)
class(worldmap)
class(osm)
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 20, format = "png",
messaging = FALSE, urlonly = TRUE, filename = "ggmapTemp",
color = "color")
ggmap(worldmap)
class(worldmap)
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 20, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 10, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 5, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
ggmap(worldmap)
?get_openstreetmap
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 606250, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 606, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
ggmap(worldmap)
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 533, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 545.979, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
ggmap(worldmap)
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 546, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
get_openstreetmap(bbox = c(left = -95.80204, bottom = 29.38048, right = -94.92313, top = 30.14344),
scale = 606250,
format = c("png"),
messaging = FALSE, urlonly = FALSE,
filename = "ggmapTemp", color = c("color"))
testmap <- get_openstreetmap(bbox = c(left = -95.80204, bottom = 29.38048, right = -94.92313, top = 30.14344),
scale = 606250,
format = c("png"),
messaging = FALSE, urlonly = FALSE,
filename = "ggmapTemp", color = c("color"))
ggmap(testmap)
worldmap <- get_openstreetmap(bbox = c(left = -40.08, bottom = -42.03, right = 50.27, top = 56.66 ),
scale = 70266727, format = c("png"),
messaging = FALSE, urlonly = FALSE, filename = "ggmapTemp",
color = c("color"))
shiny::runApp('git/shiny/App-2')
?checkboxGroupInput
?checkboxGroupInput
plot(build.formula("price", c("cut", "color")), data= diamonds)
plot(lm(price ~ cut + colro), data= diamonds)
plot(lm("price" ~ "cut" + "color"), data= diamonds)
plot(lm("price" ~ "color"), data= diamonds)
plot(build.formula("price", "color"), data= diamonds)
plot(build.formula("price", "cut"), data= diamonds)
plot(build.formula("price", c("cut", "color")), data= diamonds)
z<- c("Hockey", "Lacross", "Curling", "Hockey", "Lacross", "Baseball", "Hockey")
z2 <- as.factor(z)
model.matrix(~ z -1)
z2
model.matrix(~ z)
library(RODBC)
install(RODBC)
install.packages("RODBC")
n<- 20
r <- 1:10
w <- data.frame(n,r)
save (r,n,w, file="multiple.radata")
rm(r, n, w)
load ("multiple.rdata")
n<- 20
r <- 1:10
w <- data.frame(n,r)
save (r,n,w, file="multiple.rdata")
load ("multiple.rdata")
toCheck <- 1
p<- switch(toCheck,
1, "hello",
0, "goodbye",
"confused")
p
p<- switch(toCheck,
1="hello",
0= "goodbye",
"confused")
p<- switch(toCheck,
"1"="hello",
"0"= "goodbye",
"confused")
p
sayHello <- function()
{
print("Hello, world!")
}
sayHello()
mult <- function(x, n)
{
return ( x*n)
}
library(plyr)
ddply(diamonds, "cut", summarize, Price=mean(price), Carat=sum(carat))
library(ggplot2)
ddply(diamonds, "cut", summarize, Price=mean(price), Carat=sum(carat))
ddply(diamonds, "cut", summarize, Price=mean(price), Carat=sum(carat), Count=length(carat))
baseballAvg <- with(baseball, h/ab)
baseball$Avg <- with(baseball, h/ab)
head(baseball)
baseball <- baseball[baseball$ab >= 50, ]
batAvg <- function(x){
sum(x$h)/ sum(x$ab)
}
careerAvg <- ddply(baseball, "id", batAvg)
careerAvg
library(reshape2)
head(airquality)
airMelt <- melt(airquality, id=c("Month", "Day"), value.name="Value", variable.name="Metric")
head(airMelt)
airCast <- dcast(airMelt, formula = Month + Day ~ Metric, value.var = "Value" )
tail(airCast)
library(shiny)
shiny::runApp('git/shiny/ExampleApp')
library(shiny)
library(shiny)
shiny::runApp('git/shiny/ExampleApp')
plotOutput("normPlot")
require(ggmap)
require(rworldmap)
require(OpenStreetMap)
require(rgdal)
require(plyr)
require(stringr)
require(ggplot2)
mapdata$admissions <- as.numeric(mapdata$admissions)
class(mapdata$long)
mapdata <- join(x=admissions, y= latlong, by = "iso", match ="first")
mapdata[27,4] <- 4.8
mapdata[27,5] <- 31.6
write.table(mapdata, "mapdata.csv", sep=",", col.names= TRUE, row.names = FALSE)
Africa <- get_map(location = 'Africa', zoom = 2)
head(mapdata)
kmap <- mapdata[-grep("0", mapdata$kwashiorkor), ]
?get_osm
plot(testmap) + geom_point(data = pp, aes(x =lon, y= lat,size = sitenum), alpha=0.5)
ggmap(Africa) + geom_point(data=kmap, aes(x=long, y = lat, size = kwashiorkor, color = admissions), alpha=0.5)
nm <- c("osm", "maptoolkit-topo", "mapquest",
"mapquest-aerial", "bing", "stamen-toner",
"stamen-watercolor", "esri", "esri-topo",
"nps", "apple-iphoto", "skobbler")
testmap <- openmap(c(60,-34), c(-40,140), zoom = 3)
class(testmap)
Africa <- get_map(location = 'Africa', zoom = 2)
head(mapdata)
gc< geocode ("world")
gc<- geocode ("world")
ggmap(get_googlemap(center = center, color = "bw", scale = 2), extent = "device")
center <- as.numeric(gc)
ggmap(get_googlemap(center = center, color = "bw", scale = 2), extent = "device")
library(ggplot)
library(rworldmaps)
library(rworldmap)
"Venezuela")
countries <- c("Armenia",
"El Salvador",
"Georgia",
"Kosovo",
"Micronesia",
"Moldova",
"Morocco",
"Paraguay",
"Philippines",
"Syria",
"Ukraine",
"West Bank & Gaza",
"Yemen",
"Albania",
"Algeria",
"America Samoa",
"Argentina",
"Azerbaijan",
"Belarus",
"Belize",
"Bosnia Herzegovina",
"Brazil",
"Bulgaria",
"China",
"Columbia",
"Costa Rica",
"Dominican Republic",
"Ecuador",
"Grenada",
"Hungary",
"Iran",
"Iraq",
"Jamaica",
"Jordan",
"Kazakhstan",
"Lebanon",
"Libya",
"Macedonia",
"Malaysia",
"Marshall Islands",
"Mexico",
"Montenegro",
"Panama",
"Peru",
"Romania",
"Serbia",
"St. Lucia",
"Thailand",
"Tunisia",
"Turkey",
"Venezuela")
y <- 10
df <- data.frame (countries, y)
head(df)
joinCountryData2Map (df,joinCode = "ISO3", nameJoinColumn = "country")
joinCountryData2Map (df,joinCode = "ISO3", nameJoinColumn = "countries")
joinCountryData2Map (df,joinCode = "NAME", nameJoinColumn = "countries")
plot(getMap())
countrymap <- joinCountryData2Map (df,joinCode = "NAME", nameJoinColumn = "countries")
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "y" )
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = y)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries")
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical")
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical", numCats = 1)
numCats = 0)
numCats= "1")
numCats= 2)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical",
numCats= 2)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical",
numCats= 0)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical",
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "pretty",
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical",
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical", addLegend = FALSE,
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical", colourPalette = c("red"), addLegend = FALSE,
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical", addLegend = FALSE,
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "y", catMethod = "categorical", addLegend = FALSE,
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "y", catMethod = "categorical", colorPallete = c("blue"), addLegend = FALSE,
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "y", catMethod = "categorical", colourPallete = c("blue"), addLegend = FALSE,
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "y", catMethod = "categorical", colourPalette = c("blue"), addLegend = FALSE,
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "y", catMethod = "categorical", colourPalette = "palette", addLegend = FALSE,
numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "y", catMethod = "pretty", colourPalette = "palette", addLegend = FALSE,
numCats= 1)
MIC_Countries <- 10
df <- data.frame (countries, MIC_Countries)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "pretty", colourPalette = "palette", addLegend = FALSE, numCats= 1)
countrymap <- joinCountryData2Map (df,joinCode = "NAME", nameJoinColumn = "countries")
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "pretty", colourPalette = "palette", addLegend = FALSE, numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", colourPalette = "palette", addLegend = FALSE, numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "palette", addLegend = FALSE, numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "red", addLegend = FALSE, numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE, numCats= 1)
source('~/.active-rstudio-document')
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = TRUE, numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical", colourPalette = "blue", addLegend = TRUE, numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE , numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE , numCats= 1)
library(rworldmap)
countries <- c("Armenia",
"El Salvador",
"Georgia",
"Kosovo",
"Micronesia",
"Moldova",
"Morocco",
"Paraguay",
"Philippines",
"Syria",
"Ukraine",
"West Bank & Gaza",
"Yemen",
"Albania",
"Algeria",
"America Samoa",
"Argentina",
"Azerbaijan",
"Belarus",
"Belize",
"Bosnia Herzegovina",
"Brazil",
"Bulgaria",
"China",
"Columbia",
"Costa Rica",
"Dominican Republic",
"Ecuador",
"Grenada",
"Hungary",
"Iran",
"Iraq",
"Jamaica",
"Jordan",
"Kazakhstan",
"Lebanon",
"Libya",
"Macedonia",
"Malaysia",
"Marshall Islands",
"Mexico",
"Montenegro",
"Panama",
"Peru",
"Romania",
"Serbia",
"St. Lucia",
"Thailand",
"Tunisia",
"Turkey",
"Venezuela")
MIC_Countries <- 10
df <- data.frame (countries, MIC_Countries)
head(df)
countrymap <- joinCountryData2Map (df,joinCode = "NAME", nameJoinColumn = "countries")
plot(getMap())
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE , numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE ,missingCountryCol = "grey", numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE ,missingCountryCol = "beige", numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE ,missingCountryCol = "white",oceanCol = "blue",  numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE ,missingCountryCol = "white",oceanCol = "a7ccd6",  numCats= 1)
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE ,missingCountryCol = "white",oceanCol = a7ccd6,  numCats= 1)
blue
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE ,missingCountryCol = "white",  numCats= 1)
library(rworldmap)
countries <- c("Armenia",
"El Salvador",
"Georgia",
"Kosovo",
"Micronesia",
"Moldova",
"Morocco",
"Paraguay",
"Philippines",
"Syria",
"Ukraine",
"West Bank & Gaza",
"Yemen",
"Albania",
"Algeria",
"America Samoa",
"Argentina",
"Azerbaijan",
"Belarus",
"Belize",
"Bosnia Herzegovina",
"Brazil",
"Bulgaria",
"China",
"Columbia",
"Costa Rica",
"Dominican Republic",
"Ecuador",
"Grenada",
"Hungary",
"Iran",
"Iraq",
"Jamaica",
"Jordan",
"Kazakhstan",
"Lebanon",
"Libya",
"Macedonia",
"Malaysia",
"Marshall Islands",
"Mexico",
"Montenegro",
"Panama",
"Peru",
"Romania",
"Serbia",
"St. Lucia",
"Thailand",
"Tunisia",
"Turkey",
"Venezuela")
MIC_Countries <- 10
df <- data.frame (countries, MIC_Countries)
head(df)
countrymap <- joinCountryData2Map (df,joinCode = "NAME", nameJoinColumn = "countries")
plot(getMap())
mapCountryData(mapToPlot = countrymap, nameColumnToPlot = "MIC_Countries", catMethod = "categorical", colourPalette = "blue", addLegend = FALSE , numCats= 1)
setwd("git/medicalmisconduct/")
misconduct <- read.table("medical_misconduct.csv", header = TRUE, stringsAsFactors = FALSE, sep="," )
misconduct <- read.table("medical_misconduct.csv", header = TRUE, sep=",", stringsAsFactors = FALSE)
misconduct <- read.table("medical_misconduct.csv", header = FALSE, sep=",", stringsAsFactors = FALSE)
pwd
setwd("~/git/medicalmisconduct/")
misconduct <- read.table("medical_misconduct.csv", header = FALSE, sep=",", stringsAsFactors = FALSE)
misconduct <- read.table("Users/vivianpeng/git/medicalmisconduct/medical_misconduct.csv", header = FALSE, sep=",", stringsAsFactors = FALSE)
misconduct <- read.table("medical_misconduct.csv", header = FALSE, sep=",", stringsAsFactors = FALSE)
misconduct <- read.table("medical_misconduct.csv", header = TRUE, sep=",", stringsAsFactors = FALSE)
